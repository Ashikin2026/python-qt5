/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Thu Sep 18 06:18:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPI_QOpenGLFunctions_ES2.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
#include <qopenglfunctions_es2.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"



PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_initializeOpenGLFunctions, "QOpenGLFunctions_ES2.initializeOpenGLFunctions() -> bool");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_initializeOpenGLFunctions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_initializeOpenGLFunctions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->initializeOpenGLFunctions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_initializeOpenGLFunctions, doc_QOpenGLFunctions_ES2_initializeOpenGLFunctions);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glActiveTexture, "QOpenGLFunctions_ES2.glActiveTexture(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glActiveTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glActiveTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glActiveTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glActiveTexture, doc_QOpenGLFunctions_ES2_glActiveTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glAttachShader, "QOpenGLFunctions_ES2.glAttachShader(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glAttachShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glAttachShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glAttachShader(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glAttachShader, doc_QOpenGLFunctions_ES2_glAttachShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBindAttribLocation, "QOpenGLFunctions_ES2.glBindAttribLocation(int, int, str)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBindAttribLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBindAttribLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        const GLchar* a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buus", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glBindAttribLocation(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBindAttribLocation, doc_QOpenGLFunctions_ES2_glBindAttribLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBindBuffer, "QOpenGLFunctions_ES2.glBindBuffer(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glBindBuffer(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBindBuffer, doc_QOpenGLFunctions_ES2_glBindBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBindFramebuffer, "QOpenGLFunctions_ES2.glBindFramebuffer(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBindFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBindFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glBindFramebuffer(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBindFramebuffer, doc_QOpenGLFunctions_ES2_glBindFramebuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBindRenderbuffer, "QOpenGLFunctions_ES2.glBindRenderbuffer(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBindRenderbuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBindRenderbuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glBindRenderbuffer(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBindRenderbuffer, doc_QOpenGLFunctions_ES2_glBindRenderbuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBindTexture, "QOpenGLFunctions_ES2.glBindTexture(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBindTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBindTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glBindTexture(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBindTexture, doc_QOpenGLFunctions_ES2_glBindTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBlendColor, "QOpenGLFunctions_ES2.glBlendColor(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBlendColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBlendColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLclampf a0;
        GLclampf a1;
        GLclampf a2;
        GLclampf a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glBlendColor(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBlendColor, doc_QOpenGLFunctions_ES2_glBlendColor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBlendEquation, "QOpenGLFunctions_ES2.glBlendEquation(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBlendEquation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBlendEquation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glBlendEquation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBlendEquation, doc_QOpenGLFunctions_ES2_glBlendEquation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBlendEquationSeparate, "QOpenGLFunctions_ES2.glBlendEquationSeparate(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBlendEquationSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBlendEquationSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glBlendEquationSeparate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBlendEquationSeparate, doc_QOpenGLFunctions_ES2_glBlendEquationSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBlendFunc, "QOpenGLFunctions_ES2.glBlendFunc(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBlendFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBlendFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glBlendFunc(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBlendFunc, doc_QOpenGLFunctions_ES2_glBlendFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBlendFuncSeparate, "QOpenGLFunctions_ES2.glBlendFuncSeparate(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBlendFuncSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBlendFuncSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLenum a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glBlendFuncSeparate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBlendFuncSeparate, doc_QOpenGLFunctions_ES2_glBlendFuncSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBufferData, "QOpenGLFunctions_ES2.glBufferData(int, int, sequence-or-buffer, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBufferData(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBufferData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizeiptr a1;
        PyObject * a2;
        GLenum a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BulP0u", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array;
        
        if (a2 == Py_None)
            array = 0;
        else
            array = qpyopengl_value_array(&sipError, a2, GL_UNSIGNED_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glBufferData(a0, a1, array, a3);
#line 427 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBufferData, doc_QOpenGLFunctions_ES2_glBufferData);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glBufferSubData, "QOpenGLFunctions_ES2.glBufferSubData(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glBufferSubData(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glBufferSubData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLintptr a1;
        GLsizeiptr a2;
        PyObject * a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BullP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 61 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array;
        
        if (a3 == Py_None)
            array = 0;
        else
            array = qpyopengl_value_array(&sipError, a3, GL_UNSIGNED_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glBufferSubData(a0, a1, a2, array);
#line 477 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glBufferSubData, doc_QOpenGLFunctions_ES2_glBufferSubData);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCheckFramebufferStatus, "QOpenGLFunctions_ES2.glCheckFramebufferStatus(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCheckFramebufferStatus(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCheckFramebufferStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLenum sipRes;

            sipRes = sipCpp->glCheckFramebufferStatus(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCheckFramebufferStatus, doc_QOpenGLFunctions_ES2_glCheckFramebufferStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glClear, "QOpenGLFunctions_ES2.glClear(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glClear(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glClear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbitfield a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glClear(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glClear, doc_QOpenGLFunctions_ES2_glClear);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glClearColor, "QOpenGLFunctions_ES2.glClearColor(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glClearColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLclampf a0;
        GLclampf a1;
        GLclampf a2;
        GLclampf a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glClearColor(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glClearColor, doc_QOpenGLFunctions_ES2_glClearColor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glClearDepthf, "QOpenGLFunctions_ES2.glClearDepthf(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glClearDepthf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glClearDepthf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLclampf a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glClearDepthf(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glClearDepthf, doc_QOpenGLFunctions_ES2_glClearDepthf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glClearStencil, "QOpenGLFunctions_ES2.glClearStencil(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glClearStencil(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glClearStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glClearStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glClearStencil, doc_QOpenGLFunctions_ES2_glClearStencil);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glColorMask, "QOpenGLFunctions_ES2.glColorMask(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glColorMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glColorMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLboolean a0;
        GLboolean a1;
        GLboolean a2;
        GLboolean a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BMMMM", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColorMask(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glColorMask, doc_QOpenGLFunctions_ES2_glColorMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCompileShader, "QOpenGLFunctions_ES2.glCompileShader(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCompileShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCompileShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glCompileShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCompileShader, doc_QOpenGLFunctions_ES2_glCompileShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCompressedTexImage2D, "QOpenGLFunctions_ES2.glCompressedTexImage2D(int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCompressedTexImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCompressedTexImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLsizei a3;
        GLsizei a4;
        GLint a5;
        GLsizei a6;
        PyObject * a7;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuiiiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipErrorState sipError = sipErrorNone;

#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a7, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexImage2D(a0, a1, a2, a3, a4, a5, a6, array);
#line 723 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCompressedTexImage2D, doc_QOpenGLFunctions_ES2_glCompressedTexImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCompressedTexSubImage2D, "QOpenGLFunctions_ES2.glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCompressedTexSubImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCompressedTexSubImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        GLsizei a5;
        GLenum a6;
        GLsizei a7;
        PyObject * a8;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiuiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexSubImage2D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 774 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCompressedTexSubImage2D, doc_QOpenGLFunctions_ES2_glCompressedTexSubImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCopyTexImage2D, "QOpenGLFunctions_ES2.glCopyTexImage2D(int, int, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCopyTexImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCopyTexImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLint a3;
        GLint a4;
        GLsizei a5;
        GLsizei a6;
        GLint a7;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiuiiiii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp->glCopyTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCopyTexImage2D, doc_QOpenGLFunctions_ES2_glCopyTexImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCopyTexSubImage2D, "QOpenGLFunctions_ES2.glCopyTexSubImage2D(int, int, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCopyTexSubImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCopyTexSubImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        GLint a5;
        GLsizei a6;
        GLsizei a7;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiiiiii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp->glCopyTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCopyTexSubImage2D, doc_QOpenGLFunctions_ES2_glCopyTexSubImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCreateProgram, "QOpenGLFunctions_ES2.glCreateProgram() -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCreateProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCreateProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->glCreateProgram();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCreateProgram, doc_QOpenGLFunctions_ES2_glCreateProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCreateShader, "QOpenGLFunctions_ES2.glCreateShader(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCreateShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCreateShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLuint sipRes;

            sipRes = sipCpp->glCreateShader(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCreateShader, doc_QOpenGLFunctions_ES2_glCreateShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glCullFace, "QOpenGLFunctions_ES2.glCullFace(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glCullFace(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glCullFace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glCullFace(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glCullFace, doc_QOpenGLFunctions_ES2_glCullFace);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDeleteBuffers, "QOpenGLFunctions_ES2.glDeleteBuffers(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDeleteBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDeleteBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 104 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteBuffers(a0, reinterpret_cast<const GLuint *>(array));
#line 968 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDeleteBuffers, doc_QOpenGLFunctions_ES2_glDeleteBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDeleteFramebuffers, "QOpenGLFunctions_ES2.glDeleteFramebuffers(int, object)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDeleteFramebuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDeleteFramebuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 113 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteFramebuffers(a0, reinterpret_cast<const GLuint *>(array));
#line 1012 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDeleteFramebuffers, doc_QOpenGLFunctions_ES2_glDeleteFramebuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDeleteProgram, "QOpenGLFunctions_ES2.glDeleteProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDeleteProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDeleteProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glDeleteProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDeleteProgram, doc_QOpenGLFunctions_ES2_glDeleteProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDeleteRenderbuffers, "QOpenGLFunctions_ES2.glDeleteRenderbuffers(int, object)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDeleteRenderbuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDeleteRenderbuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteRenderbuffers(a0, reinterpret_cast<const GLuint *>(array));
#line 1083 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDeleteRenderbuffers, doc_QOpenGLFunctions_ES2_glDeleteRenderbuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDeleteShader, "QOpenGLFunctions_ES2.glDeleteShader(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDeleteShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDeleteShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glDeleteShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDeleteShader, doc_QOpenGLFunctions_ES2_glDeleteShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDeleteTextures, "QOpenGLFunctions_ES2.glDeleteTextures(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDeleteTextures(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDeleteTextures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 133 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteTextures(a0, reinterpret_cast<const GLuint *>(array));
#line 1154 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDeleteTextures, doc_QOpenGLFunctions_ES2_glDeleteTextures);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDepthFunc, "QOpenGLFunctions_ES2.glDepthFunc(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDepthFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDepthFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glDepthFunc(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDepthFunc, doc_QOpenGLFunctions_ES2_glDepthFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDepthMask, "QOpenGLFunctions_ES2.glDepthMask(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDepthMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDepthMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLboolean a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glDepthMask(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDepthMask, doc_QOpenGLFunctions_ES2_glDepthMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDepthRangef, "QOpenGLFunctions_ES2.glDepthRangef(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDepthRangef(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDepthRangef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLclampf a0;
        GLclampf a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glDepthRangef(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDepthRangef, doc_QOpenGLFunctions_ES2_glDepthRangef);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDetachShader, "QOpenGLFunctions_ES2.glDetachShader(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDetachShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDetachShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glDetachShader(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDetachShader, doc_QOpenGLFunctions_ES2_glDetachShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDisable, "QOpenGLFunctions_ES2.glDisable(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDisable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDisable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glDisable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDisable, doc_QOpenGLFunctions_ES2_glDisable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDisableVertexAttribArray, "QOpenGLFunctions_ES2.glDisableVertexAttribArray(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDisableVertexAttribArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDisableVertexAttribArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glDisableVertexAttribArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDisableVertexAttribArray, doc_QOpenGLFunctions_ES2_glDisableVertexAttribArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDrawArrays, "QOpenGLFunctions_ES2.glDrawArrays(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDrawArrays(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDrawArrays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLsizei a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glDrawArrays(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDrawArrays, doc_QOpenGLFunctions_ES2_glDrawArrays);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glDrawElements, "QOpenGLFunctions_ES2.glDrawElements(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glDrawElements(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glDrawElements(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        GLenum a2;
        PyObject * a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 149 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, a2, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDrawElements(a0, a1, a2, array);
#line 1392 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glDrawElements, doc_QOpenGLFunctions_ES2_glDrawElements);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glEnable, "QOpenGLFunctions_ES2.glEnable(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glEnable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glEnable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glEnable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glEnable, doc_QOpenGLFunctions_ES2_glEnable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glEnableVertexAttribArray, "QOpenGLFunctions_ES2.glEnableVertexAttribArray(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glEnableVertexAttribArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glEnableVertexAttribArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glEnableVertexAttribArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glEnableVertexAttribArray, doc_QOpenGLFunctions_ES2_glEnableVertexAttribArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glFinish, "QOpenGLFunctions_ES2.glFinish()");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glFinish(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glFinish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp))
        {
            sipCpp->glFinish();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glFinish, doc_QOpenGLFunctions_ES2_glFinish);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glFlush, "QOpenGLFunctions_ES2.glFlush()");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glFlush(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glFlush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp))
        {
            sipCpp->glFlush();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glFlush, doc_QOpenGLFunctions_ES2_glFlush);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glFramebufferRenderbuffer, "QOpenGLFunctions_ES2.glFramebufferRenderbuffer(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glFramebufferRenderbuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glFramebufferRenderbuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLuint a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glFramebufferRenderbuffer(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glFramebufferRenderbuffer, doc_QOpenGLFunctions_ES2_glFramebufferRenderbuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glFramebufferTexture2D, "QOpenGLFunctions_ES2.glFramebufferTexture2D(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glFramebufferTexture2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glFramebufferTexture2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLuint a3;
        GLint a4;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuui", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glFramebufferTexture2D(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glFramebufferTexture2D, doc_QOpenGLFunctions_ES2_glFramebufferTexture2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glFrontFace, "QOpenGLFunctions_ES2.glFrontFace(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glFrontFace(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glFrontFace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glFrontFace(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glFrontFace, doc_QOpenGLFunctions_ES2_glFrontFace);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGenBuffers, "QOpenGLFunctions_ES2.glGenBuffers(int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGenBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGenBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 164 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenBuffers(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 1632 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGenBuffers, doc_QOpenGLFunctions_ES2_glGenBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGenerateMipmap, "QOpenGLFunctions_ES2.glGenerateMipmap(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGenerateMipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGenerateMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glGenerateMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGenerateMipmap, doc_QOpenGLFunctions_ES2_glGenerateMipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGenFramebuffers, "QOpenGLFunctions_ES2.glGenFramebuffers(int, int-or-tuple)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGenFramebuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGenFramebuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 176 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenFramebuffers(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 1699 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGenFramebuffers, doc_QOpenGLFunctions_ES2_glGenFramebuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGenRenderbuffers, "QOpenGLFunctions_ES2.glGenRenderbuffers(int) -> int-ot-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGenRenderbuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGenRenderbuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 187 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenRenderbuffers(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 1740 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGenRenderbuffers, doc_QOpenGLFunctions_ES2_glGenRenderbuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGenTextures, "QOpenGLFunctions_ES2.glGenTextures(int, int-or-tuple)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGenTextures(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGenTextures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenTextures(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 1780 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGenTextures, doc_QOpenGLFunctions_ES2_glGenTextures);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetActiveAttrib, "QOpenGLFunctions_ES2.glGetActiveAttrib(int, int) -> str, int, int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetActiveAttrib(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetActiveAttrib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 209 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint bufsize;
        
        sipCpp->glGetProgramiv(a0, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, &bufsize);
        
        GLchar *name = new GLchar[bufsize];
        GLint size;
        GLenum type;
        
        sipCpp->glGetActiveAttrib(a0, a1, bufsize, 0, &size, &type, name);
        
        sipRes = Py_BuildValue("siI", name, size, type);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] name;
#line 1831 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetActiveAttrib, doc_QOpenGLFunctions_ES2_glGetActiveAttrib);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetActiveUniform, "QOpenGLFunctions_ES2.glGetActiveUniform(int, int) -> str, int, int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetActiveUniform(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetActiveUniform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 229 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint bufsize;
        
        sipCpp->glGetProgramiv(a0, GL_ACTIVE_UNIFORM_MAX_LENGTH, &bufsize);
        
        GLchar *name = new GLchar[bufsize];
        GLint size;
        GLenum type;
        
        sipCpp->glGetActiveUniform(a0, a1, bufsize, 0, &size, &type, name);
        
        sipRes = Py_BuildValue("siI", name, size, type);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] name;
#line 1881 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetActiveUniform, doc_QOpenGLFunctions_ES2_glGetActiveUniform);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetAttachedShaders, "QOpenGLFunctions_ES2.glGetAttachedShaders(int) -> tuple-of-int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetAttachedShaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetAttachedShaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint nr_shaders;
        
        sipCpp->glGetProgramiv(a0, GL_ATTACHED_SHADERS, &nr_shaders);
        
        if (nr_shaders < 1)
        {
            sipRes = PyTuple_New(0);
        }
        else
        {
            GLuint *shaders = new GLuint[nr_shaders];
        
            sipCpp->glGetAttachedShaders(a0, nr_shaders, 0, shaders);
        
            sipRes = PyTuple_New(nr_shaders);
        
            if (sipRes)
            {
                for (GLint i = 0; i < nr_shaders; ++i)
                {
                    PyObject *itm = SIPLong_FromLong(shaders[i]);
                    
                    if (!itm)
                    {
                        Py_DECREF(sipRes);
                        sipRes = 0;
                        break;
                    }
                    
                    PyTuple_SET_ITEM(sipRes, i, itm);
                }
            }
        
            delete[] shaders;
        }
        
        if (!sipRes)
            sipIsErr = 1;
#line 1952 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetAttachedShaders, doc_QOpenGLFunctions_ES2_glGetAttachedShaders);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetAttribLocation, "QOpenGLFunctions_ES2.glGetAttribLocation(int, str) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetAttribLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetAttribLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        const GLchar* a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bus", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->glGetAttribLocation(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetAttribLocation, doc_QOpenGLFunctions_ES2_glGetAttribLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetBooleanv, "QOpenGLFunctions_ES2.glGetBooleanv(int) -> bool-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetBooleanv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetBooleanv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 292 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLboolean fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLboolean[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetBooleanv(a0, params);
        a1 = qpyopengl_from_GLboolean(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 2079 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetBooleanv, doc_QOpenGLFunctions_ES2_glGetBooleanv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetBufferParameteriv, "QOpenGLFunctions_ES2.glGetBufferParameteriv(int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetBufferParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetBufferParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glGetBufferParameteriv(a0,a1,&a2);

            return SIPLong_FromLong(a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetBufferParameteriv, doc_QOpenGLFunctions_ES2_glGetBufferParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetError, "QOpenGLFunctions_ES2.glGetError() -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetError(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp))
        {
            GLenum sipRes;

            sipRes = sipCpp->glGetError();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetError, doc_QOpenGLFunctions_ES2_glGetError);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetFloatv, "QOpenGLFunctions_ES2.glGetFloatv(int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetFloatv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetFloatv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 363 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLfloat fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLfloat[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetFloatv(a0, params);
        a1 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 2232 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetFloatv, doc_QOpenGLFunctions_ES2_glGetFloatv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetFramebufferAttachmentParameteriv, "QOpenGLFunctions_ES2.glGetFramebufferAttachmentParameteriv(int, int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetFramebufferAttachmentParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetFramebufferAttachmentParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLint a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glGetFramebufferAttachmentParameteriv(a0,a1,a2,&a3);

            return SIPLong_FromLong(a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetFramebufferAttachmentParameteriv, doc_QOpenGLFunctions_ES2_glGetFramebufferAttachmentParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetIntegerv, "QOpenGLFunctions_ES2.glGetIntegerv(int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetIntegerv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetIntegerv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 433 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLint[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetIntegerv(a0, params);
        a1 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 2359 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetIntegerv, doc_QOpenGLFunctions_ES2_glGetIntegerv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetProgramiv, "QOpenGLFunctions_ES2.glGetProgramiv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetProgramiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetProgramiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 502 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint params[3];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        #if defined(GL_COMPUTE_LOCAL_WORK_SIZE)
        case GL_COMPUTE_LOCAL_WORK_SIZE:
            nr_params = 3;
            break;
        #endif
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetProgramiv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 2411 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetProgramiv, doc_QOpenGLFunctions_ES2_glGetProgramiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetProgramInfoLog, "QOpenGLFunctions_ES2.glGetProgramInfoLog(int) -> str");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetProgramInfoLog(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetProgramInfoLog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;

#line 524 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint bufsize;
        
        sipCpp->glGetProgramiv(a0, GL_INFO_LOG_LENGTH, &bufsize);
        
        if (bufsize > 0)
        {
            GLchar *log = new GLchar[bufsize];
        
            sipCpp->glGetProgramInfoLog(a0, bufsize, 0, log);
            sipRes = SIPBytes_FromString(log);
        
            delete[] log;
        }
        else
        {
            sipRes = SIPBytes_FromString("");
        }
#line 2460 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetProgramInfoLog, doc_QOpenGLFunctions_ES2_glGetProgramInfoLog);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetRenderbufferParameteriv, "QOpenGLFunctions_ES2.glGetRenderbufferParameteriv(int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetRenderbufferParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetRenderbufferParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glGetRenderbufferParameteriv(a0,a1,&a2);

            return SIPLong_FromLong(a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetRenderbufferParameteriv, doc_QOpenGLFunctions_ES2_glGetRenderbufferParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetShaderiv, "QOpenGLFunctions_ES2.glGetShaderiv(int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glGetShaderiv(a0,a1,&a2);

            return SIPLong_FromLong(a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetShaderiv, doc_QOpenGLFunctions_ES2_glGetShaderiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetShaderInfoLog, "QOpenGLFunctions_ES2.glGetShaderInfoLog(int) -> str");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderInfoLog(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderInfoLog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;

#line 547 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint bufsize;
        
        sipCpp->glGetShaderiv(a0, GL_INFO_LOG_LENGTH, &bufsize);
        
        if (bufsize > 0)
        {
            GLchar *log = new GLchar[bufsize];
        
            sipCpp->glGetShaderInfoLog(a0, bufsize, 0, log);
            sipRes = SIPBytes_FromString(log);
        
            delete[] log;
        }
        else
        {
            sipRes = SIPBytes_FromString("");
        }
#line 2562 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetShaderInfoLog, doc_QOpenGLFunctions_ES2_glGetShaderInfoLog);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetShaderPrecisionFormat, "QOpenGLFunctions_ES2.glGetShaderPrecisionFormat(int, int) -> (int, int), int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderPrecisionFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderPrecisionFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 568 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint range[2], precision;
        
        sipCpp->glGetShaderPrecisionFormat(a0, a1, range, &precision);
        
        sipRes = Py_BuildValue("(ii)i", (int)range[0], (int)range[1], (int)precision);
        
        if (!sipRes)
            sipIsErr = 1;
#line 2601 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetShaderPrecisionFormat, doc_QOpenGLFunctions_ES2_glGetShaderPrecisionFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetShaderSource, "QOpenGLFunctions_ES2.glGetShaderSource(int) -> str");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderSource(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetShaderSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;

#line 580 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint bufsize;
        
        sipCpp->glGetShaderiv(a0, GL_SHADER_SOURCE_LENGTH, &bufsize);
        
        if (bufsize > 0)
        {
            GLchar *source = new GLchar[bufsize];
        
            sipCpp->glGetShaderSource(a0, bufsize, 0, source);
            sipRes = SIPBytes_FromString(source);
        
            delete[] source;
        }
        else
        {
            sipRes = SIPBytes_FromString("");
        }
#line 2650 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetShaderSource, doc_QOpenGLFunctions_ES2_glGetShaderSource);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetString, "QOpenGLFunctions_ES2.glGetString(int) -> str");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetString(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            const char*sipRes = 0;

#line 601 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        sipRes = reinterpret_cast<const char *>(sipCpp->glGetString(a0));
#line 2680 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetString, doc_QOpenGLFunctions_ES2_glGetString);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetTexParameterfv, "QOpenGLFunctions_ES2.glGetTexParameterfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetTexParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetTexParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 606 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        #if defined(GL_TEXTURE_SWIZZLE_RGBA) || defined(GL_TEXTURE_SWIZZLE_RGBA)
        #if defined(GL_TEXTURE_SWIZZLE_RGBA)
        case GL_TEXTURE_SWIZZLE_RGBA:
        #endif
        #if defined(GL_TEXTURE_BORDER_COLOR)
        case GL_TEXTURE_BORDER_COLOR:
        #endif
            nr_params = 4;
            break;
        #endif
            
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexParameterfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 2740 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetTexParameterfv, doc_QOpenGLFunctions_ES2_glGetTexParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetTexParameteriv, "QOpenGLFunctions_ES2.glGetTexParameteriv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetTexParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetTexParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 633 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        #if defined(GL_TEXTURE_SWIZZLE_RGBA) || defined(GL_TEXTURE_SWIZZLE_RGBA)
        #if defined(GL_TEXTURE_SWIZZLE_RGBA)
        case GL_TEXTURE_SWIZZLE_RGBA:
        #endif
        #if defined(GL_TEXTURE_BORDER_COLOR)
        case GL_TEXTURE_BORDER_COLOR:
        #endif
            nr_params = 4;
            break;
        #endif
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexParameteriv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 2797 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetTexParameteriv, doc_QOpenGLFunctions_ES2_glGetTexParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetUniformLocation, "QOpenGLFunctions_ES2.glGetUniformLocation(int, str) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetUniformLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetUniformLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        const GLchar* a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bus", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->glGetUniformLocation(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetUniformLocation, doc_QOpenGLFunctions_ES2_glGetUniformLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetVertexAttribfv, "QOpenGLFunctions_ES2.glGetVertexAttribfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetVertexAttribfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetVertexAttribfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 661 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CURRENT_VERTEX_ATTRIB:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetVertexAttribfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 2876 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetVertexAttribfv, doc_QOpenGLFunctions_ES2_glGetVertexAttribfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glGetVertexAttribiv, "QOpenGLFunctions_ES2.glGetVertexAttribiv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glGetVertexAttribiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glGetVertexAttribiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 681 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CURRENT_VERTEX_ATTRIB:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetVertexAttribiv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 2926 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glGetVertexAttribiv, doc_QOpenGLFunctions_ES2_glGetVertexAttribiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glHint, "QOpenGLFunctions_ES2.glHint(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glHint(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glHint, doc_QOpenGLFunctions_ES2_glHint);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsBuffer, "QOpenGLFunctions_ES2.glIsBuffer(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsBuffer(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsBuffer, doc_QOpenGLFunctions_ES2_glIsBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsEnabled, "QOpenGLFunctions_ES2.glIsEnabled(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsEnabled(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsEnabled, doc_QOpenGLFunctions_ES2_glIsEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsFramebuffer, "QOpenGLFunctions_ES2.glIsFramebuffer(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsFramebuffer(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsFramebuffer, doc_QOpenGLFunctions_ES2_glIsFramebuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsProgram, "QOpenGLFunctions_ES2.glIsProgram(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsProgram(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsProgram, doc_QOpenGLFunctions_ES2_glIsProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsRenderbuffer, "QOpenGLFunctions_ES2.glIsRenderbuffer(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsRenderbuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsRenderbuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsRenderbuffer(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsRenderbuffer, doc_QOpenGLFunctions_ES2_glIsRenderbuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsShader, "QOpenGLFunctions_ES2.glIsShader(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsShader(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsShader, doc_QOpenGLFunctions_ES2_glIsShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glIsTexture, "QOpenGLFunctions_ES2.glIsTexture(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glIsTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glIsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsTexture(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glIsTexture, doc_QOpenGLFunctions_ES2_glIsTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glLineWidth, "QOpenGLFunctions_ES2.glLineWidth(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glLineWidth(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glLineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glLineWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glLineWidth, doc_QOpenGLFunctions_ES2_glLineWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glLinkProgram, "QOpenGLFunctions_ES2.glLinkProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glLinkProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glLinkProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glLinkProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glLinkProgram, doc_QOpenGLFunctions_ES2_glLinkProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glPixelStorei, "QOpenGLFunctions_ES2.glPixelStorei(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glPixelStorei(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glPixelStorei(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glPixelStorei(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glPixelStorei, doc_QOpenGLFunctions_ES2_glPixelStorei);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glPolygonOffset, "QOpenGLFunctions_ES2.glPolygonOffset(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glPolygonOffset(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glPolygonOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glPolygonOffset(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glPolygonOffset, doc_QOpenGLFunctions_ES2_glPolygonOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glReleaseShaderCompiler, "QOpenGLFunctions_ES2.glReleaseShaderCompiler()");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glReleaseShaderCompiler(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glReleaseShaderCompiler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp))
        {
            sipCpp->glReleaseShaderCompiler();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glReleaseShaderCompiler, doc_QOpenGLFunctions_ES2_glReleaseShaderCompiler);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glRenderbufferStorage, "QOpenGLFunctions_ES2.glRenderbufferStorage(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glRenderbufferStorage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glRenderbufferStorage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLsizei a2;
        GLsizei a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRenderbufferStorage(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glRenderbufferStorage, doc_QOpenGLFunctions_ES2_glRenderbufferStorage);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glSampleCoverage, "QOpenGLFunctions_ES2.glSampleCoverage(float, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glSampleCoverage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glSampleCoverage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLclampf a0;
        GLboolean a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfM", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glSampleCoverage(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glSampleCoverage, doc_QOpenGLFunctions_ES2_glSampleCoverage);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glScissor, "QOpenGLFunctions_ES2.glScissor(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glScissor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glScissor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLsizei a2;
        GLsizei a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glScissor(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glScissor, doc_QOpenGLFunctions_ES2_glScissor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glStencilFunc, "QOpenGLFunctions_ES2.glStencilFunc(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glStencilFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glStencilFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLuint a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glStencilFunc(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glStencilFunc, doc_QOpenGLFunctions_ES2_glStencilFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glStencilFuncSeparate, "QOpenGLFunctions_ES2.glStencilFuncSeparate(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glStencilFuncSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glStencilFuncSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        GLuint a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuiu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glStencilFuncSeparate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glStencilFuncSeparate, doc_QOpenGLFunctions_ES2_glStencilFuncSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glStencilMask, "QOpenGLFunctions_ES2.glStencilMask(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glStencilMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glStencilMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glStencilMask(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glStencilMask, doc_QOpenGLFunctions_ES2_glStencilMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glStencilMaskSeparate, "QOpenGLFunctions_ES2.glStencilMaskSeparate(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glStencilMaskSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glStencilMaskSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glStencilMaskSeparate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glStencilMaskSeparate, doc_QOpenGLFunctions_ES2_glStencilMaskSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glStencilOp, "QOpenGLFunctions_ES2.glStencilOp(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glStencilOp(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glStencilOp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glStencilOp(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glStencilOp, doc_QOpenGLFunctions_ES2_glStencilOp);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glStencilOpSeparate, "QOpenGLFunctions_ES2.glStencilOpSeparate(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glStencilOpSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glStencilOpSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLenum a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glStencilOpSeparate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glStencilOpSeparate, doc_QOpenGLFunctions_ES2_glStencilOpSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glTexImage2D, "QOpenGLFunctions_ES2.glTexImage2D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glTexImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glTexImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLsizei a3;
        GLsizei a4;
        GLint a5;
        GLenum a6;
        GLenum a7;
        PyObject * a8;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 723 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, a7, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexImage2D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 3619 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glTexImage2D, doc_QOpenGLFunctions_ES2_glTexImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glTexParameterf, "QOpenGLFunctions_ES2.glTexParameterf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glTexParameterf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glTexParameterf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexParameterf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glTexParameterf, doc_QOpenGLFunctions_ES2_glTexParameterf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glTexParameterfv, "QOpenGLFunctions_ES2.glTexParameterfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glTexParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glTexParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 732 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexParameterfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 3692 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glTexParameterfv, doc_QOpenGLFunctions_ES2_glTexParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glTexParameteri, "QOpenGLFunctions_ES2.glTexParameteri(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glTexParameteri(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glTexParameteri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexParameteri(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glTexParameteri, doc_QOpenGLFunctions_ES2_glTexParameteri);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glTexParameteriv, "QOpenGLFunctions_ES2.glTexParameteriv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glTexParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glTexParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 741 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexParameteriv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 3765 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glTexParameteriv, doc_QOpenGLFunctions_ES2_glTexParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glTexSubImage2D, "QOpenGLFunctions_ES2.glTexSubImage2D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glTexSubImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glTexSubImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        GLsizei a5;
        GLenum a6;
        GLenum a7;
        PyObject * a8;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 749 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, a7, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexSubImage2D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 3815 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glTexSubImage2D, doc_QOpenGLFunctions_ES2_glTexSubImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform1f, "QOpenGLFunctions_ES2.glUniform1f(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glUniform1f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform1f, doc_QOpenGLFunctions_ES2_glUniform1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform1fv, "QOpenGLFunctions_ES2.glUniform1fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 758 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform1fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 3887 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform1fv, doc_QOpenGLFunctions_ES2_glUniform1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform1i, "QOpenGLFunctions_ES2.glUniform1i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform1i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform1i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glUniform1i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform1i, doc_QOpenGLFunctions_ES2_glUniform1i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform1iv, "QOpenGLFunctions_ES2.glUniform1iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform1iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform1iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 767 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform1iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 3959 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform1iv, doc_QOpenGLFunctions_ES2_glUniform1iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform2f, "QOpenGLFunctions_ES2.glUniform2f(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glUniform2f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform2f, doc_QOpenGLFunctions_ES2_glUniform2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform2fv, "QOpenGLFunctions_ES2.glUniform2fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 776 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform2fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4032 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform2fv, doc_QOpenGLFunctions_ES2_glUniform2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform2i, "QOpenGLFunctions_ES2.glUniform2i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glUniform2i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform2i, doc_QOpenGLFunctions_ES2_glUniform2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform2iv, "QOpenGLFunctions_ES2.glUniform2iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 785 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform2iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 4105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform2iv, doc_QOpenGLFunctions_ES2_glUniform2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform3f, "QOpenGLFunctions_ES2.glUniform3f(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glUniform3f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform3f, doc_QOpenGLFunctions_ES2_glUniform3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform3fv, "QOpenGLFunctions_ES2.glUniform3fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 794 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform3fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4179 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform3fv, doc_QOpenGLFunctions_ES2_glUniform3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform3i, "QOpenGLFunctions_ES2.glUniform3i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glUniform3i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform3i, doc_QOpenGLFunctions_ES2_glUniform3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform3iv, "QOpenGLFunctions_ES2.glUniform3iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 803 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform3iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 4253 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform3iv, doc_QOpenGLFunctions_ES2_glUniform3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform4f, "QOpenGLFunctions_ES2.glUniform4f(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glUniform4f(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform4f, doc_QOpenGLFunctions_ES2_glUniform4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform4fv, "QOpenGLFunctions_ES2.glUniform4fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 812 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform4fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4328 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform4fv, doc_QOpenGLFunctions_ES2_glUniform4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform4i, "QOpenGLFunctions_ES2.glUniform4i(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glUniform4i(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform4i, doc_QOpenGLFunctions_ES2_glUniform4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniform4iv, "QOpenGLFunctions_ES2.glUniform4iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniform4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniform4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 821 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform4iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 4403 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniform4iv, doc_QOpenGLFunctions_ES2_glUniform4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniformMatrix2fv, "QOpenGLFunctions_ES2.glUniformMatrix2fv(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniformMatrix2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniformMatrix2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        GLboolean a2;
        PyObject * a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiMP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 829 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniformMatrix2fv(a0, a1, a2,
                    reinterpret_cast<const GLfloat *>(array));
#line 4449 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniformMatrix2fv, doc_QOpenGLFunctions_ES2_glUniformMatrix2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniformMatrix3fv, "QOpenGLFunctions_ES2.glUniformMatrix3fv(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniformMatrix3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniformMatrix3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        GLboolean a2;
        PyObject * a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiMP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 838 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniformMatrix3fv(a0, a1, a2,
                    reinterpret_cast<const GLfloat *>(array));
#line 4495 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniformMatrix3fv, doc_QOpenGLFunctions_ES2_glUniformMatrix3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUniformMatrix4fv, "QOpenGLFunctions_ES2.glUniformMatrix4fv(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUniformMatrix4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUniformMatrix4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        GLboolean a2;
        PyObject * a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiMP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 847 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniformMatrix4fv(a0, a1, a2,
                    reinterpret_cast<const GLfloat *>(array));
#line 4541 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUniformMatrix4fv, doc_QOpenGLFunctions_ES2_glUniformMatrix4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glUseProgram, "QOpenGLFunctions_ES2.glUseProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glUseProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glUseProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glUseProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glUseProgram, doc_QOpenGLFunctions_ES2_glUseProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glValidateProgram, "QOpenGLFunctions_ES2.glValidateProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glValidateProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glValidateProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0))
        {
            sipCpp->glValidateProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glValidateProgram, doc_QOpenGLFunctions_ES2_glValidateProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib1f, "QOpenGLFunctions_ES2.glVertexAttrib1f(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertexAttrib1f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib1f, doc_QOpenGLFunctions_ES2_glVertexAttrib1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib1fv, "QOpenGLFunctions_ES2.glVertexAttrib1fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 859 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib1fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 4666 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib1fv, doc_QOpenGLFunctions_ES2_glVertexAttrib1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib2f, "QOpenGLFunctions_ES2.glVertexAttrib2f(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertexAttrib2f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib2f, doc_QOpenGLFunctions_ES2_glVertexAttrib2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib2fv, "QOpenGLFunctions_ES2.glVertexAttrib2fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 868 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib2fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 4738 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib2fv, doc_QOpenGLFunctions_ES2_glVertexAttrib2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib3f, "QOpenGLFunctions_ES2.glVertexAttrib3f(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bufff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertexAttrib3f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib3f, doc_QOpenGLFunctions_ES2_glVertexAttrib3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib3fv, "QOpenGLFunctions_ES2.glVertexAttrib3fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 877 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib3fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 4811 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib3fv, doc_QOpenGLFunctions_ES2_glVertexAttrib3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib4f, "QOpenGLFunctions_ES2.glVertexAttrib4f(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buffff", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glVertexAttrib4f(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib4f, doc_QOpenGLFunctions_ES2_glVertexAttrib4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttrib4fv, "QOpenGLFunctions_ES2.glVertexAttrib4fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttrib4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 886 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 4885 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttrib4fv, doc_QOpenGLFunctions_ES2_glVertexAttrib4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glVertexAttribPointer, "QOpenGLFunctions_ES2.glVertexAttribPointer(int, int, int, int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttribPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glVertexAttribPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLint a1;
        GLenum a2;
        GLboolean a3;
        GLsizei a4;
        PyObject * a5;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuMiP0", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 894 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\sip/_QOpenGLFunctions_ES2/qopenglfunctions_es2.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a5, a2, sipSelf,
                "VertexAttribPointer", a0);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttribPointer(a0, a1, a2, a3, a4, array);
#line 4933 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.3.2\\_QOpenGLFunctions_ES2/sip_QOpenGLFunctions_ES2QOpenGLFunctions_ES2.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glVertexAttribPointer, doc_QOpenGLFunctions_ES2_glVertexAttribPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_ES2_glViewport, "QOpenGLFunctions_ES2.glViewport(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_ES2_glViewport(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_ES2_glViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLsizei a2;
        GLsizei a3;
        QOpenGLFunctions_ES2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_ES2, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glViewport(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_ES2, sipName_glViewport, doc_QOpenGLFunctions_ES2_glViewport);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QOpenGLFunctions_ES2(void *, const sipTypeDef *);}
static void *cast_QOpenGLFunctions_ES2(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QOpenGLFunctions_ES2)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractOpenGLFunctions)->ctd_cast((QAbstractOpenGLFunctions *)(QOpenGLFunctions_ES2 *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLFunctions_ES2(void *, int);}
static void release_QOpenGLFunctions_ES2(void *sipCppV,int)
{
    delete reinterpret_cast<QOpenGLFunctions_ES2 *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLFunctions_ES2(sipSimpleWrapper *);}
static void dealloc_QOpenGLFunctions_ES2(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLFunctions_ES2(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QOpenGLFunctions_ES2(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLFunctions_ES2(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QOpenGLFunctions_ES2 *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QOpenGLFunctions_ES2();

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLFunctions_ES2[] = {{0, 1, 1}};


static PyMethodDef methods_QOpenGLFunctions_ES2[] = {
    {SIP_MLNAME_CAST(sipName_glActiveTexture), meth_QOpenGLFunctions_ES2_glActiveTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glActiveTexture)},
    {SIP_MLNAME_CAST(sipName_glAttachShader), meth_QOpenGLFunctions_ES2_glAttachShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glAttachShader)},
    {SIP_MLNAME_CAST(sipName_glBindAttribLocation), meth_QOpenGLFunctions_ES2_glBindAttribLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBindAttribLocation)},
    {SIP_MLNAME_CAST(sipName_glBindBuffer), meth_QOpenGLFunctions_ES2_glBindBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBindBuffer)},
    {SIP_MLNAME_CAST(sipName_glBindFramebuffer), meth_QOpenGLFunctions_ES2_glBindFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBindFramebuffer)},
    {SIP_MLNAME_CAST(sipName_glBindRenderbuffer), meth_QOpenGLFunctions_ES2_glBindRenderbuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBindRenderbuffer)},
    {SIP_MLNAME_CAST(sipName_glBindTexture), meth_QOpenGLFunctions_ES2_glBindTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBindTexture)},
    {SIP_MLNAME_CAST(sipName_glBlendColor), meth_QOpenGLFunctions_ES2_glBlendColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBlendColor)},
    {SIP_MLNAME_CAST(sipName_glBlendEquation), meth_QOpenGLFunctions_ES2_glBlendEquation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBlendEquation)},
    {SIP_MLNAME_CAST(sipName_glBlendEquationSeparate), meth_QOpenGLFunctions_ES2_glBlendEquationSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBlendEquationSeparate)},
    {SIP_MLNAME_CAST(sipName_glBlendFunc), meth_QOpenGLFunctions_ES2_glBlendFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBlendFunc)},
    {SIP_MLNAME_CAST(sipName_glBlendFuncSeparate), meth_QOpenGLFunctions_ES2_glBlendFuncSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBlendFuncSeparate)},
    {SIP_MLNAME_CAST(sipName_glBufferData), meth_QOpenGLFunctions_ES2_glBufferData, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBufferData)},
    {SIP_MLNAME_CAST(sipName_glBufferSubData), meth_QOpenGLFunctions_ES2_glBufferSubData, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glBufferSubData)},
    {SIP_MLNAME_CAST(sipName_glCheckFramebufferStatus), meth_QOpenGLFunctions_ES2_glCheckFramebufferStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCheckFramebufferStatus)},
    {SIP_MLNAME_CAST(sipName_glClear), meth_QOpenGLFunctions_ES2_glClear, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glClear)},
    {SIP_MLNAME_CAST(sipName_glClearColor), meth_QOpenGLFunctions_ES2_glClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glClearColor)},
    {SIP_MLNAME_CAST(sipName_glClearDepthf), meth_QOpenGLFunctions_ES2_glClearDepthf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glClearDepthf)},
    {SIP_MLNAME_CAST(sipName_glClearStencil), meth_QOpenGLFunctions_ES2_glClearStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glClearStencil)},
    {SIP_MLNAME_CAST(sipName_glColorMask), meth_QOpenGLFunctions_ES2_glColorMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glColorMask)},
    {SIP_MLNAME_CAST(sipName_glCompileShader), meth_QOpenGLFunctions_ES2_glCompileShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCompileShader)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexImage2D), meth_QOpenGLFunctions_ES2_glCompressedTexImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCompressedTexImage2D)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexSubImage2D), meth_QOpenGLFunctions_ES2_glCompressedTexSubImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCompressedTexSubImage2D)},
    {SIP_MLNAME_CAST(sipName_glCopyTexImage2D), meth_QOpenGLFunctions_ES2_glCopyTexImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCopyTexImage2D)},
    {SIP_MLNAME_CAST(sipName_glCopyTexSubImage2D), meth_QOpenGLFunctions_ES2_glCopyTexSubImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCopyTexSubImage2D)},
    {SIP_MLNAME_CAST(sipName_glCreateProgram), meth_QOpenGLFunctions_ES2_glCreateProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCreateProgram)},
    {SIP_MLNAME_CAST(sipName_glCreateShader), meth_QOpenGLFunctions_ES2_glCreateShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCreateShader)},
    {SIP_MLNAME_CAST(sipName_glCullFace), meth_QOpenGLFunctions_ES2_glCullFace, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glCullFace)},
    {SIP_MLNAME_CAST(sipName_glDeleteBuffers), meth_QOpenGLFunctions_ES2_glDeleteBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDeleteBuffers)},
    {SIP_MLNAME_CAST(sipName_glDeleteFramebuffers), meth_QOpenGLFunctions_ES2_glDeleteFramebuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDeleteFramebuffers)},
    {SIP_MLNAME_CAST(sipName_glDeleteProgram), meth_QOpenGLFunctions_ES2_glDeleteProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDeleteProgram)},
    {SIP_MLNAME_CAST(sipName_glDeleteRenderbuffers), meth_QOpenGLFunctions_ES2_glDeleteRenderbuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDeleteRenderbuffers)},
    {SIP_MLNAME_CAST(sipName_glDeleteShader), meth_QOpenGLFunctions_ES2_glDeleteShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDeleteShader)},
    {SIP_MLNAME_CAST(sipName_glDeleteTextures), meth_QOpenGLFunctions_ES2_glDeleteTextures, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDeleteTextures)},
    {SIP_MLNAME_CAST(sipName_glDepthFunc), meth_QOpenGLFunctions_ES2_glDepthFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDepthFunc)},
    {SIP_MLNAME_CAST(sipName_glDepthMask), meth_QOpenGLFunctions_ES2_glDepthMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDepthMask)},
    {SIP_MLNAME_CAST(sipName_glDepthRangef), meth_QOpenGLFunctions_ES2_glDepthRangef, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDepthRangef)},
    {SIP_MLNAME_CAST(sipName_glDetachShader), meth_QOpenGLFunctions_ES2_glDetachShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDetachShader)},
    {SIP_MLNAME_CAST(sipName_glDisable), meth_QOpenGLFunctions_ES2_glDisable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDisable)},
    {SIP_MLNAME_CAST(sipName_glDisableVertexAttribArray), meth_QOpenGLFunctions_ES2_glDisableVertexAttribArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDisableVertexAttribArray)},
    {SIP_MLNAME_CAST(sipName_glDrawArrays), meth_QOpenGLFunctions_ES2_glDrawArrays, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDrawArrays)},
    {SIP_MLNAME_CAST(sipName_glDrawElements), meth_QOpenGLFunctions_ES2_glDrawElements, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glDrawElements)},
    {SIP_MLNAME_CAST(sipName_glEnable), meth_QOpenGLFunctions_ES2_glEnable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glEnable)},
    {SIP_MLNAME_CAST(sipName_glEnableVertexAttribArray), meth_QOpenGLFunctions_ES2_glEnableVertexAttribArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glEnableVertexAttribArray)},
    {SIP_MLNAME_CAST(sipName_glFinish), meth_QOpenGLFunctions_ES2_glFinish, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glFinish)},
    {SIP_MLNAME_CAST(sipName_glFlush), meth_QOpenGLFunctions_ES2_glFlush, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glFlush)},
    {SIP_MLNAME_CAST(sipName_glFramebufferRenderbuffer), meth_QOpenGLFunctions_ES2_glFramebufferRenderbuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glFramebufferRenderbuffer)},
    {SIP_MLNAME_CAST(sipName_glFramebufferTexture2D), meth_QOpenGLFunctions_ES2_glFramebufferTexture2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glFramebufferTexture2D)},
    {SIP_MLNAME_CAST(sipName_glFrontFace), meth_QOpenGLFunctions_ES2_glFrontFace, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glFrontFace)},
    {SIP_MLNAME_CAST(sipName_glGenBuffers), meth_QOpenGLFunctions_ES2_glGenBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGenBuffers)},
    {SIP_MLNAME_CAST(sipName_glGenFramebuffers), meth_QOpenGLFunctions_ES2_glGenFramebuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGenFramebuffers)},
    {SIP_MLNAME_CAST(sipName_glGenRenderbuffers), meth_QOpenGLFunctions_ES2_glGenRenderbuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGenRenderbuffers)},
    {SIP_MLNAME_CAST(sipName_glGenTextures), meth_QOpenGLFunctions_ES2_glGenTextures, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGenTextures)},
    {SIP_MLNAME_CAST(sipName_glGenerateMipmap), meth_QOpenGLFunctions_ES2_glGenerateMipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGenerateMipmap)},
    {SIP_MLNAME_CAST(sipName_glGetActiveAttrib), meth_QOpenGLFunctions_ES2_glGetActiveAttrib, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetActiveAttrib)},
    {SIP_MLNAME_CAST(sipName_glGetActiveUniform), meth_QOpenGLFunctions_ES2_glGetActiveUniform, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetActiveUniform)},
    {SIP_MLNAME_CAST(sipName_glGetAttachedShaders), meth_QOpenGLFunctions_ES2_glGetAttachedShaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetAttachedShaders)},
    {SIP_MLNAME_CAST(sipName_glGetAttribLocation), meth_QOpenGLFunctions_ES2_glGetAttribLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetAttribLocation)},
    {SIP_MLNAME_CAST(sipName_glGetBooleanv), meth_QOpenGLFunctions_ES2_glGetBooleanv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetBooleanv)},
    {SIP_MLNAME_CAST(sipName_glGetBufferParameteriv), meth_QOpenGLFunctions_ES2_glGetBufferParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetBufferParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetError), meth_QOpenGLFunctions_ES2_glGetError, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetError)},
    {SIP_MLNAME_CAST(sipName_glGetFloatv), meth_QOpenGLFunctions_ES2_glGetFloatv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetFloatv)},
    {SIP_MLNAME_CAST(sipName_glGetFramebufferAttachmentParameteriv), meth_QOpenGLFunctions_ES2_glGetFramebufferAttachmentParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetFramebufferAttachmentParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetIntegerv), meth_QOpenGLFunctions_ES2_glGetIntegerv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetIntegerv)},
    {SIP_MLNAME_CAST(sipName_glGetProgramInfoLog), meth_QOpenGLFunctions_ES2_glGetProgramInfoLog, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetProgramInfoLog)},
    {SIP_MLNAME_CAST(sipName_glGetProgramiv), meth_QOpenGLFunctions_ES2_glGetProgramiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetProgramiv)},
    {SIP_MLNAME_CAST(sipName_glGetRenderbufferParameteriv), meth_QOpenGLFunctions_ES2_glGetRenderbufferParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetRenderbufferParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetShaderInfoLog), meth_QOpenGLFunctions_ES2_glGetShaderInfoLog, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetShaderInfoLog)},
    {SIP_MLNAME_CAST(sipName_glGetShaderPrecisionFormat), meth_QOpenGLFunctions_ES2_glGetShaderPrecisionFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetShaderPrecisionFormat)},
    {SIP_MLNAME_CAST(sipName_glGetShaderSource), meth_QOpenGLFunctions_ES2_glGetShaderSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetShaderSource)},
    {SIP_MLNAME_CAST(sipName_glGetShaderiv), meth_QOpenGLFunctions_ES2_glGetShaderiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetShaderiv)},
    {SIP_MLNAME_CAST(sipName_glGetString), meth_QOpenGLFunctions_ES2_glGetString, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetString)},
    {SIP_MLNAME_CAST(sipName_glGetTexParameterfv), meth_QOpenGLFunctions_ES2_glGetTexParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetTexParameterfv)},
    {SIP_MLNAME_CAST(sipName_glGetTexParameteriv), meth_QOpenGLFunctions_ES2_glGetTexParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetTexParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetUniformLocation), meth_QOpenGLFunctions_ES2_glGetUniformLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetUniformLocation)},
    {SIP_MLNAME_CAST(sipName_glGetVertexAttribfv), meth_QOpenGLFunctions_ES2_glGetVertexAttribfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetVertexAttribfv)},
    {SIP_MLNAME_CAST(sipName_glGetVertexAttribiv), meth_QOpenGLFunctions_ES2_glGetVertexAttribiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glGetVertexAttribiv)},
    {SIP_MLNAME_CAST(sipName_glHint), meth_QOpenGLFunctions_ES2_glHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glHint)},
    {SIP_MLNAME_CAST(sipName_glIsBuffer), meth_QOpenGLFunctions_ES2_glIsBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsBuffer)},
    {SIP_MLNAME_CAST(sipName_glIsEnabled), meth_QOpenGLFunctions_ES2_glIsEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsEnabled)},
    {SIP_MLNAME_CAST(sipName_glIsFramebuffer), meth_QOpenGLFunctions_ES2_glIsFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsFramebuffer)},
    {SIP_MLNAME_CAST(sipName_glIsProgram), meth_QOpenGLFunctions_ES2_glIsProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsProgram)},
    {SIP_MLNAME_CAST(sipName_glIsRenderbuffer), meth_QOpenGLFunctions_ES2_glIsRenderbuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsRenderbuffer)},
    {SIP_MLNAME_CAST(sipName_glIsShader), meth_QOpenGLFunctions_ES2_glIsShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsShader)},
    {SIP_MLNAME_CAST(sipName_glIsTexture), meth_QOpenGLFunctions_ES2_glIsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glIsTexture)},
    {SIP_MLNAME_CAST(sipName_glLineWidth), meth_QOpenGLFunctions_ES2_glLineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glLineWidth)},
    {SIP_MLNAME_CAST(sipName_glLinkProgram), meth_QOpenGLFunctions_ES2_glLinkProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glLinkProgram)},
    {SIP_MLNAME_CAST(sipName_glPixelStorei), meth_QOpenGLFunctions_ES2_glPixelStorei, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glPixelStorei)},
    {SIP_MLNAME_CAST(sipName_glPolygonOffset), meth_QOpenGLFunctions_ES2_glPolygonOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glPolygonOffset)},
    {SIP_MLNAME_CAST(sipName_glReleaseShaderCompiler), meth_QOpenGLFunctions_ES2_glReleaseShaderCompiler, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glReleaseShaderCompiler)},
    {SIP_MLNAME_CAST(sipName_glRenderbufferStorage), meth_QOpenGLFunctions_ES2_glRenderbufferStorage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glRenderbufferStorage)},
    {SIP_MLNAME_CAST(sipName_glSampleCoverage), meth_QOpenGLFunctions_ES2_glSampleCoverage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glSampleCoverage)},
    {SIP_MLNAME_CAST(sipName_glScissor), meth_QOpenGLFunctions_ES2_glScissor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glScissor)},
    {SIP_MLNAME_CAST(sipName_glStencilFunc), meth_QOpenGLFunctions_ES2_glStencilFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glStencilFunc)},
    {SIP_MLNAME_CAST(sipName_glStencilFuncSeparate), meth_QOpenGLFunctions_ES2_glStencilFuncSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glStencilFuncSeparate)},
    {SIP_MLNAME_CAST(sipName_glStencilMask), meth_QOpenGLFunctions_ES2_glStencilMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glStencilMask)},
    {SIP_MLNAME_CAST(sipName_glStencilMaskSeparate), meth_QOpenGLFunctions_ES2_glStencilMaskSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glStencilMaskSeparate)},
    {SIP_MLNAME_CAST(sipName_glStencilOp), meth_QOpenGLFunctions_ES2_glStencilOp, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glStencilOp)},
    {SIP_MLNAME_CAST(sipName_glStencilOpSeparate), meth_QOpenGLFunctions_ES2_glStencilOpSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glStencilOpSeparate)},
    {SIP_MLNAME_CAST(sipName_glTexImage2D), meth_QOpenGLFunctions_ES2_glTexImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glTexImage2D)},
    {SIP_MLNAME_CAST(sipName_glTexParameterf), meth_QOpenGLFunctions_ES2_glTexParameterf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glTexParameterf)},
    {SIP_MLNAME_CAST(sipName_glTexParameterfv), meth_QOpenGLFunctions_ES2_glTexParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glTexParameterfv)},
    {SIP_MLNAME_CAST(sipName_glTexParameteri), meth_QOpenGLFunctions_ES2_glTexParameteri, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glTexParameteri)},
    {SIP_MLNAME_CAST(sipName_glTexParameteriv), meth_QOpenGLFunctions_ES2_glTexParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glTexParameteriv)},
    {SIP_MLNAME_CAST(sipName_glTexSubImage2D), meth_QOpenGLFunctions_ES2_glTexSubImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glTexSubImage2D)},
    {SIP_MLNAME_CAST(sipName_glUniform1f), meth_QOpenGLFunctions_ES2_glUniform1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform1f)},
    {SIP_MLNAME_CAST(sipName_glUniform1fv), meth_QOpenGLFunctions_ES2_glUniform1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform1fv)},
    {SIP_MLNAME_CAST(sipName_glUniform1i), meth_QOpenGLFunctions_ES2_glUniform1i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform1i)},
    {SIP_MLNAME_CAST(sipName_glUniform1iv), meth_QOpenGLFunctions_ES2_glUniform1iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform1iv)},
    {SIP_MLNAME_CAST(sipName_glUniform2f), meth_QOpenGLFunctions_ES2_glUniform2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform2f)},
    {SIP_MLNAME_CAST(sipName_glUniform2fv), meth_QOpenGLFunctions_ES2_glUniform2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform2fv)},
    {SIP_MLNAME_CAST(sipName_glUniform2i), meth_QOpenGLFunctions_ES2_glUniform2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform2i)},
    {SIP_MLNAME_CAST(sipName_glUniform2iv), meth_QOpenGLFunctions_ES2_glUniform2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform2iv)},
    {SIP_MLNAME_CAST(sipName_glUniform3f), meth_QOpenGLFunctions_ES2_glUniform3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform3f)},
    {SIP_MLNAME_CAST(sipName_glUniform3fv), meth_QOpenGLFunctions_ES2_glUniform3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform3fv)},
    {SIP_MLNAME_CAST(sipName_glUniform3i), meth_QOpenGLFunctions_ES2_glUniform3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform3i)},
    {SIP_MLNAME_CAST(sipName_glUniform3iv), meth_QOpenGLFunctions_ES2_glUniform3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform3iv)},
    {SIP_MLNAME_CAST(sipName_glUniform4f), meth_QOpenGLFunctions_ES2_glUniform4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform4f)},
    {SIP_MLNAME_CAST(sipName_glUniform4fv), meth_QOpenGLFunctions_ES2_glUniform4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform4fv)},
    {SIP_MLNAME_CAST(sipName_glUniform4i), meth_QOpenGLFunctions_ES2_glUniform4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform4i)},
    {SIP_MLNAME_CAST(sipName_glUniform4iv), meth_QOpenGLFunctions_ES2_glUniform4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniform4iv)},
    {SIP_MLNAME_CAST(sipName_glUniformMatrix2fv), meth_QOpenGLFunctions_ES2_glUniformMatrix2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniformMatrix2fv)},
    {SIP_MLNAME_CAST(sipName_glUniformMatrix3fv), meth_QOpenGLFunctions_ES2_glUniformMatrix3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniformMatrix3fv)},
    {SIP_MLNAME_CAST(sipName_glUniformMatrix4fv), meth_QOpenGLFunctions_ES2_glUniformMatrix4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUniformMatrix4fv)},
    {SIP_MLNAME_CAST(sipName_glUseProgram), meth_QOpenGLFunctions_ES2_glUseProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glUseProgram)},
    {SIP_MLNAME_CAST(sipName_glValidateProgram), meth_QOpenGLFunctions_ES2_glValidateProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glValidateProgram)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1f), meth_QOpenGLFunctions_ES2_glVertexAttrib1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib1f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1fv), meth_QOpenGLFunctions_ES2_glVertexAttrib1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib1fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2f), meth_QOpenGLFunctions_ES2_glVertexAttrib2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib2f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2fv), meth_QOpenGLFunctions_ES2_glVertexAttrib2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib2fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3f), meth_QOpenGLFunctions_ES2_glVertexAttrib3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib3f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3fv), meth_QOpenGLFunctions_ES2_glVertexAttrib3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib3fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4f), meth_QOpenGLFunctions_ES2_glVertexAttrib4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib4f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4fv), meth_QOpenGLFunctions_ES2_glVertexAttrib4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttrib4fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttribPointer), meth_QOpenGLFunctions_ES2_glVertexAttribPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glVertexAttribPointer)},
    {SIP_MLNAME_CAST(sipName_glViewport), meth_QOpenGLFunctions_ES2_glViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_glViewport)},
    {SIP_MLNAME_CAST(sipName_initializeOpenGLFunctions), meth_QOpenGLFunctions_ES2_initializeOpenGLFunctions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_ES2_initializeOpenGLFunctions)}
};

PyDoc_STRVAR(doc_QOpenGLFunctions_ES2, "\1QOpenGLFunctions_ES2()");


pyqt5ClassTypeDef sipTypeDef__QOpenGLFunctions_ES2_QOpenGLFunctions_ES2 = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLFunctions_ES2,
        {0}
    },
    {
        sipNameNr_QOpenGLFunctions_ES2,
        {0, 0, 1},
        137, methods_QOpenGLFunctions_ES2,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLFunctions_ES2,
    -1,
    -1,
    supers_QOpenGLFunctions_ES2,
    0,
    init_type_QOpenGLFunctions_ES2,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLFunctions_ES2,
    0,
    0,
    0,
    release_QOpenGLFunctions_ES2,
    cast_QOpenGLFunctions_ES2,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
